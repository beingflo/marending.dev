---
import Layout from '../../../layouts/layout.astro';
import { A, Note, Title, P, H2, H3 } from '../../../components';
import { notes } from '../../notes';

const info = notes['16-hour-projects'];
---

<Layout>
	<Note>
		<Title subtitle={info.subtitle}>
			{info.title}
		</Title>
		<P>
			Some years ago I found myself desiring a note-taking application with a feature set that
			seemingly no piece of software satisfied. At this point, I had developed some minor web
			development skills at work, so I got the sudden idea to build it myself. While obvious to
			others, I was mainly dabbling in small command line utilities and graphical simulations prior,
			I wasn't used to the idea of making <em>useful</em> software for myself. Against better judgement,
			I jumped in and started building
			<A href="https://write.fieldnotes.land">fieldnotes.land</A>.
		</P>
		<H2>Act I - Chaos</H2>
		<P>
			What followed was a year-long, on-and-off odyssey that included 3 complete rewrites. At one
			point I started hallucinating a path to commercialization. Ultimately, I used 2 different
			backend languages, 3 databases, 1 frontend framework with 3 different state management
			solutions. Not to mention the radical deployment changes: Raspberry Pi in a shoebox to VPS in
			a datacenter.
		</P>
		<P>
			It was an incredibly educational experience, but also a chaotic, unstructured one. I did not
			sit down and think about a feature set, a UI concept or anything of the like, I just started
			building. I never reflected on my time management and bike-shedding.
		</P>
		<P>
			When I finally decided I had tweaked the UI enough and it was fine to stay as it is for the
			foreseeable future, I needed a radical change of pace.
		</P>
		<H2>Act II - Order</H2>
		<P>
			For my next project (<A href="https://rest.quest">rest.quest</A>) I challenged myself to stick
			to a strict 16 hour time budget. This short limit would have to suffice to do everything from
			defining what features the application should even have, how it should look and behave, all
			the way to the implementation and deployment. First, I sat down and came up with a plan for
			what needed to be done and how much time I would allocate to each: 2 hours for initial project
			setup and deployment, 2 hours for UI / UX concept, 6 hours for implementation of basic
			features, 4 hours for advanced features and 2 hours of reserve.
		</P>
		<P>
			Then, I forced myself to follow this plan exactly. Over the course of about a month, I spent
			approximately 18 hours total on this project. The result was very close to what I had
			conceptualized during the design phase. I've been using the application every day in the one
			and a half years since.
		</P>
		<H2>The unresonable effectiveness of self-imposed limits</H2>
		<P>
			The time limit forced me to make some trade-offs I probably wouldn't have thought of
			otherwise. For one, the application doesn't have a backend! The data is primarily stored
			client-side, with the option to configure object storage credentials in the web app to enable
			sync / backup. With more time on my hands, I wouldn't even have thought about ways to save
			time like that.
		</P>
		<P>Innovative UI</P>
	</Note>
</Layout>
