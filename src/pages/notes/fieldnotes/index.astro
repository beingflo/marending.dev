---
import Layout from '../../../layouts/layout.astro';
import { Note, Title, P, H2, H3, Img, A, Details, C, Li } from '../../../components';
import { notes } from '../../notes';
import textli from './textli-v1.png';
import textliv2 from './textli-v2.png';
import fieldnotes from './fieldnotes.png';
import list from './fieldnotes-list.png';
import settings from './fieldnotes-settings.png';
import login from './fieldnotes-login.png';
import encryption from './fieldnotes-encryption.png';
import share from './fieldnotes-share.png';
import { Code } from '../../../components';
import { Hint } from '../../../components';

const info = notes['fieldnotes'];
---

<Layout>
	<Note>
		<Title
			subtitle={info.subtitle}
			date={info.date}>
			{info.title}
		</Title>
		<P>
			Some years ago I got very serious about upping my privacy game. From Gmail and Google Drive to
			cloud based note taking applications, I wanted to stop giving all my data to companies that
			would monetize it. The first order of business was to replace my haphazard use of Google Keep
			with a private note taking application.
		</P>
		<P>
			My requirements were simple: Allow low-friction editing, a clean UI, and end-to-end
			encryption. To my surprise I could not find a single application that fullfilled all three. So
			instead I set out to create my own. Over the next year or so, I embarked on a tumultuous
			journey to build my first "large-scale" fullstack application.
		</P>
		<Details title="What's a project report?">
			<P>
				I intend to start a series of notes detailing the thought process going into my applications
				and the resulting concepts and architectures. Ideally, I would write these as I am building
				the application, but since this one has been built way before this website even existed,
				I'll have to do it retrospectively.
			</P>
			<P>
				Hopefully, I'll be able to detail my journey from novice to experienced fullstack engineer
				in this format. It may also serve as another change to reflect on what worked well and what
				didn't in my various projects.
			</P>
			<P>
				An inspiration for starting this, by the way, was
				<A href="https://alexwlchan.net/2022/screenshots/">this blog post on taking screenshots</A>.
				Writing these notes will force me to document my application in a format that is more likely
				to be viewable in the future. My trouble to get an old version of fieldnotes running just to
				take a screenshot emphasizes that point.
			</P>
		</Details>
		<H2>A brief recap</H2>
		<P>
			The very first version of this application I built featured a simple python server storing
			notes as files on disk. It didn't support multiple users and protected access using hardcoded
			basic auth. My frontend experience at this point comprised of approximately 2 months of
			on-the-job React usage. So I built the UI using React, the only way I knew how: Prop drilling.
			For UI components I used <A href="https://semantic-ui.com/">Semantic UI</A>. Looking back at
			this code my eyes start to bleed. Anyhow, this is how it looked:
		</P>
		<Img src={textli} />
		<P>
			It was simple but functional, I was hosting it on a Raspberry Pi in a shoebox. At this stage
			there was no encryption. Since I was self-hosting and thus was the only person with access to
			the data, I figured there was no point.
		</P>
		<P>
			I quickly outgrew this code base and started rewriting it. This time the backend was
			implemented in Rust with a MongoDB database. The frontend was still React, but this time
			making use of some more sophisticated state management: Context. Also, I switched to the
			<A href="https://ant.design/">Ant Design</A> UI component library. This is also the point I started
			hosting my applications on a VPS rented in a datacenter. So long, trusty shoebox RPi.
		</P>
		<P>
			Trying to start this application locally to get a screenshot turned out to be quite hard. So
			much for the longevity of frontend code bases.
		</P>
		<Img src={textliv2} />
		<P>
			But v2 was not even deployed when I got the itch to rewrite again. I gave in and built the
			application using Rust and PostgreSQL in the backend and React with Jotai state management in
			the frontend. This time around I used <A href="https://tailwindcss.com/">Tailwind CSS</A>
			with <A href="https://headlessui.com/">Headless UI</A> components. This turned out to be the stack
			that stuck. This is how it looks like today:
		</P>
		<Img src={fieldnotes} />
		<P>
			I find it amazing to look back on these 3 versions of the same application and reflect on my
			progress both technically as well as visually. You can see my minimalistic style preference
			forming in real time. And my technical preferences are materializing just as I'm using
			different approaches and figuring out better ways.
		</P>
		<P>
			In the following we will only consider the latest iteration and talk through architecture and
			design decisions.</P
		>
		<H2>Features</H2>
		<P>
			<A href="https://write.fieldnotes.land">Fieldnotes</A> currently boasts the following features:
			Low-friction editing, minimalistic and elegant UI, end-to-end encryption and private note sharing.
		</P>
		<P>
			Searching for notes (cmd+k) opens an overlay with a flat list of all notes. Due to the e2e
			encryption, only note titles can be searched here.
		</P>
		<Img src={list} />
		<P>
			Notes can be shared privately via a share dialog. The user can choose how long the share link
			should stay active for.
		</P>
		<Img src={share} />
		<P>
			In the settings, a list of all shares can be viewed. The backend keeps track of how many times
			a share has been viewed.
		</P>
		<Img src={settings} />
		<P>
			Authentication is handled by the backend in a hand-rolled auth system. Only username /
			password is supported, reset emails are not implemented.
		</P>
		<Img src={login} />
		<P>
			Upon login for the first time on a device, the user is prompted for an additional password
			that is used to derive a key for encryption. More about this in a later section.
		</P>
		<Img src={encryption} />
		<H3>Non features</H3>
		<P>
			While I now consider Fieldnotes feature complete for my purposes, it's fun to look back at
			aspirations I had for it at one point. Looking at an ancient <C>Fieldnotes Roadmap</C> note I have
			in Fieldnotes, I was thinking about collaborative editing, versioning of notes, image upload to
			s3 (to avoid blobs in the DB), note cross-linking and even a hosted personal blog site powered
			by published notes. To think I was about to reinvent a CMS by accident makes me shudder a bit.
		</P>
		<P>
			In hindsight I'm happy to have cut the cord at the point I did. Arguably, even the sharing
			functionality does not pull its own weight, I'm glad I didn't go further. Fieldnotes is
			wonderfully functional in the state it is now.
		</P>
		<H2>Architecture</H2>
		<Details title="A disclaimer about completeness">
			<P>
				This project was such a massive learning experience, it's hard to put everything in writing.
				Especially in retrospect. But I want to give one example to illustrate a train of thought
				that is hard to comprehend with some experience under your belt.
			</P>
			<P>
				Shortly before I started working on Fieldnotes, I was studing CS at university with a focus
				on high-performance computing. I had no experience with web development whatsoever. When I
				started conceptualizing the authentication system for this application, I was dumbfounded by
				the thought of making an extra DB query every time <em>any</em> request had to be authenticated
				(think checking validity of session token). After all, I was just yesterday spending a lot of
				time making sure my data is efficiently preloaded into cache, and now you're telling me I have
				to wait a relative eternity for the DB to go read from disk before I can start doing any actual
				business logic?
			</P>
			<P>
				So I was feverishly researching how other people solve this problem. I set my eyes on JWT as
				a means to be able to keep a key in memory and verify the validity of the signed token more
				efficiently than going to disk. Everyone on the internet is trying to tell you not to do
				that (mainly because revocation of a token is hard), but it remained very tempting.
			</P>
			<P>
				Ultimately, it took an embarrasing amount of time to let it sink in that this extra round
				trip to the DB does not matter much in such applications, when a network roundtrip is
				involved anyway. Turns out it's okay to stick with established best practises unless you
				really know better. Now I'm sympathetic when I see a novice ask a seemingly insane question
				on a forum, probably there are some underlying assumptions that completely skew their mental
				model.
			</P>
			<P>
				There are other such detours that would make this note unnecessarily long if mentioned, just
				know that there were many.
			</P>
		</Details>
		<P>
			At the core, the Fieldnotes backend is a simple CRUD (create, read, update, delete) app. It
			stores all its data in PostgreSQL. For authentication there are user and token tables that
			store hashed credentials as well as session tokens. The frontend is a Single Page Application
			built in React. It uses <A href="https://jotai.org/">Jotai</A> for state management. The extensive
			features of the note editor, like advanced formatting, markdown support as you type and a floating
			formatting bar are provided by the excellent <A href="https://tiptap.dev/">tiptap</A>. Most of
			the standout functionality of Fieldnotes lives in the frontend. The most interesting feature,
			worthwile of getting into is the client-side encryption.
		</P>
		<H3>Deriving the main key</H3>
		<P>
			When a user logs into the application on a new device for the first time, they are asked to
			provide an additional "encryption" password. This password is used to derive what I call the
			main key using <A
				href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#pbkdf2"
				>PBKDF2</A
			>. In other words, the password provides the initial key material to seed the creation of the
			key. Now, the key is stored in the browser and can be used for encryption and decryption.
		</P>
		<P>
			If the user attempts to use Fieldnotes on a different device now, entering the <em>same</em>
			encryption password will result in the generation of the same main key, thus, allowing interoperability
			between encrypted content from one device to the other.
		</P>
		<P> At no point does the key stored in one devices browser leave the device. </P>
		<H3>Encrypting a note</H3>
		<P> Now, let's consider what happens when a user wants to store a new note: </P>
		<P>
			<ul class="pb-4">
				<Li>User writes a note and tries saving it</Li>
				<Li
					>Client generates an encryption key for this note using <A
						href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#aes-gcm"
						>AES-GCM</A
					></Li
				>
				<Li>Client encrypts content and metadata using encryption key with AES-GCM</Li>
				<Li
					>Client wraps encryption key using main key with <A
						href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/wrapKey#aes-kw"
						>AES-KW</A
					></Li
				>
				<Li>Client sends cyphertext and wrapped key to backend for storage</Li>
			</ul>
		</P>
		<P>
			Notable here is the inclusion of the "per-note" key, we will explore later how this is useful
			for sharing notes without exposing your main key.
		</P>
		<H3>Loading metadata</H3>
		<P>
			When loading the list of notes into the frontend, the application receives an array of
			objects, each containing encrypted metadata and a wrapped key for this note. Now, we
			<A href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/unwrapKey">unwrap</A>
			each notes' key using the main key, and use it to decrypt the metadata.
		</P>
		<H3>Decrypting a note</H3>
		<P>
			To decrypt a note is very similar to loading metadata, with the exception that for this api
			call, the backend also returns the full encrypted content of a note. This is decrypted using
			the plain key for this note.
		</P>
		<H3>Sharing a note</H3>
		<P>
			To share a note to a thirdparty via only a link, we need to communicate all the information
			needed to decrypt the note. This is done by embedding the <em>plain</em> key of this particular
			note as the <A href="https://developer.mozilla.org/en-US/docs/Web/API/URL/hash">hash</A> of the
			url. So a shared link will look something like
		</P>
		<Code
			value="https://fieldnotes.land/note/uUpZgnUOeamS6SefalXjVVYb5zXChGh1#yLOOY5rCqxL0eJaZYPFrU2NzwHWqf+kkzCXNYUVLnrI="
		/>
		<P> or simplified: </P>
		<Code value="https://fieldnotes.land/note/NOTE_ID#NOTE_KEY" />
		<P>
			The client application now requests the note with <C>NOTE_ID</C> from the backend and then goes
			through the decryption process using the plain <C>NOTE_KEY</C> found in the hash.
		</P>
		<P>
			This should motivate the existence of the note key. One might consider encrypting notes
			directly using the main key. However, to allow a third party to decrypt a note, you'd have to
			provide the main key to them. That would allow them to decrypt <em>any</em> note, not just the
			one you shared, provided they can get their hands on them. By introducing a key for each note,
			we can easily share that with the recipient of a shared link, without exposing all other notes.
			There is also no privacy loss towards the backend, as the keys are wrapped by the mainkey before
			ever leaving the device.
		</P>
		<Hint>
			Now that I'm writing this I realize that asymmetric encryption never crossed my mind here.
			That could also be an avenue to avoid sharing the main key directly
		</Hint>
		<H3>Security considerations</H3>
		<P>tofu, non-extractable</P>

		<H2>Deployment</H2>
		docker compose, hetzner, caddy, spa, db migration
		<H2>Learnings</H2>
		iterative, get real about commercialization
	</Note>
</Layout>
