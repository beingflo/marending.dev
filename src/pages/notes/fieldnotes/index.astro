---
import Layout from '../../../layouts/layout.astro';
import { Note, Title, P, H2, H3, Img, A, Details } from '../../../components';
import { notes } from '../../notes';
import textli from './textli-v1.png';
import textliv2 from './textli-v2.png';
import fieldnotes from './fieldnotes.png';
import list from './fieldnotes-list.png';
import settings from './fieldnotes-settings.png';
import login from './fieldnotes-login.png';
import encryption from './fieldnotes-encryption.png';
import share from './fieldnotes-share.png';

const info = notes['fieldnotes'];
---

<Layout>
	<Note>
		<Title
			subtitle={info.subtitle}
			date={info.date}>
			{info.title}
		</Title>
		<P>
			Some years ago I got very serious about upping my privacy game. From Gmail and Google Drive to
			cloud based note taking applications, I wanted to stop giving all my data to companies that
			would monetize it. The first order of business was to replace my haphazard use of Google Keep
			with a private note taking application.
		</P>
		<P>
			My requirements were simple: Allow low-friction editing, a clean UI, and end-to-end
			encryption. To my surprise I could not find a single application that fullfilled all three. So
			instead I set out to create my own. Over the next year or so, I embarked on a tumultuous
			journey to build my first "large-scale" fullstack application.
		</P>
		<Details title="What's a project report?">
			<P>
				I intend to start a series of notes detailing the thought process going into my applications
				and the resulting concepts and architectures. Ideally, I would write these as I am building
				the application, but since this one has been built way before this website even existed,
				I'll have to do it retrospectively.
			</P>
			<P>
				Hopefully, I'll be able to detail my journey from novice to experienced fullstack engineer
				in this format. It may also serve as another change to reflect on what worked well and what
				didn't in my various projects.
			</P>
			<P>
				An inspiration for starting this, by the way, was
				<A href="https://alexwlchan.net/2022/screenshots/">this blog post on taking screenshots</A>.
				Writing these notes will force me to document my application in a format that is more likely
				to be viewable in the future. My trouble to get an old version of fieldnotes running just to
				take a screenshot emphasizes that point.
			</P>
		</Details>
		<H2>A brief recap</H2>
		<P>
			The very first version of this application I built featured a simple python server storing
			notes as files on disk. It didn't support multiple users and protected access using hardcoded
			basic auth. My frontend experience at this point comprised of approximately 2 months of
			on-the-job React usage. So I built the UI using React, the only way I knew how: Prop drilling.
			For UI components I used <A href="https://semantic-ui.com/">Semantic UI</A>. Looking back at
			this code my eyes start to bleed. Anyhow, this is how it looked:
		</P>
		<Img src={textli} />
		<P>
			It was simple but functional, I was hosting it on a Raspberry Pi in a shoebox. At this stage
			there was no encryption. Since I was self-hosting and thus was the only person with access to
			the data, I figured there was no point.
		</P>
		<P>
			I quickly outgrew this code base and started rewriting it. This time the backend was
			implemented in Rust with a MongoDB database. The frontend was still React, but this time
			making use of some more sophisticated state management: Context. Also, I switched to the
			<A href="https://ant.design/">Ant Design</A> UI component library. This is also the point I started
			hosting my applications on a VPS rented in a datacenter. So long, trusty shoebox RPi.
		</P>
		<P>
			Trying to start this application locally to get a screenshot turned out to be quite hard. So
			much for the longevity of frontend code bases.
		</P>
		<Img src={textliv2} />
		<P>
			But v2 was not even deployed when I got the itch to rewrite again. I gave in and built the
			application using Rust and PostgreSQL in the backend and React with Jotai state management in
			the frontend. This time around I used <A href="https://tailwindcss.com/">Tailwind CSS</A>
			with <A href="https://headlessui.com/">Headless UI</A> components. This turned out to be the stack
			that stuck. This is how it looks like today:
		</P>
		<Img src={fieldnotes} />
		<P>
			I find it amazing to look back on these 3 versions of the same application and reflect on my
			progress both technically as well as visually. You can see my minimalistic style preference
			forming in real time. And my technical preferences are materializing just as I'm using
			different approaches and figuring out better ways.
		</P>
		<P>
			In the following we will only consider the latest iteration and talk through architecture and
			design decisions.</P
		>
		<H2>Features</H2>
		<P>
			<A href="https://write.fieldnotes.land">Fieldnotes</A> currently boasts the following features:
			Low-friction editing, minimalistic and elegant UI, end-to-end encryption and private note sharing.
		</P>
		<P>
			Searching for notes (cmd+k) opens an overlay with a flat list of all notes. Due to the e2e
			encryption, only note titles can be searched here.
		</P>
		<Img src={list} />
		<P>
			Notes can be shared privately via a share dialog. The user can choose how long the share link
			should stay active for.
		</P>
		<Img src={share} />
		<P>
			In the settings, a list of all shares can be viewed. The backend keeps track of how many times
			a share has been viewed.
		</P>
		<Img src={settings} />
		<P>
			Authentication is handled by the backend in a hand-rolled auth system. Only username /
			password is supported, reset emails are not implemented.
		</P>
		<Img src={login} />
		<P>
			Upon login for the first time on a device, the user is prompted for an additional password
			that is used to derive a key for encryption. More about this in a later section.
		</P>
		<Img src={encryption} />
		<H3>Non features</H3>
		version history, full text search, collaborative editing, offline mode
		<H2>Architecture</H2>
		Basic Crud, e2e encryption, shares
		<H3>Encryption</H3>
		<H2>Implementation</H2>
		languages, frameworks, db schema, db migration, crypto api, state management
		<H2>Deployment</H2>
		docker compose, hetzner, caddy, spa
		<H2>Learnings</H2>
		iterative, get real about commercialization
	</Note>
</Layout>
